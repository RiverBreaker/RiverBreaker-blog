{"posts":[{"title":"Hello World","text":"Welcome to Hexo! This is your very first post. Check documentation for more info. If you get any problems when using Hexo, you can find the answer in troubleshooting or you can ask me on GitHub. Quick StartCreate a new post1$ hexo new &quot;My New Post&quot; More info: Writing Run server1$ hexo server More info: Server Generate static files1$ hexo generate More info: Generating Deploy to remote sites1$ hexo deploy More info: Deployment","link":"/RiverBreaker-blog/2024/07/04/hello-world/"},{"title":"利用GitHub构建自动化部署的博客","text":"参考文章 Bilibili视频教程-9分钟零成本搭建自动化部署个人博客(Hexo + Github Action + Page)Hexo官方文档利用 GitHub Action 自动部署 Hexo 博客Hexo主题-Icarus快速上手 前提条件当前PC环境中有Node和Git。版本可以参考Hexo文档。 文章中出现的yourusername为Github用户名，your-repo为仓库名。 1. 初始化Hexo安装脚手架，初始化hexo，这会新建blog文件夹，进入后安装依赖。 1234npm install -g hexo-clihexo init blogcd blognpm install 2. 初始化仓库可以选择利用VSCode等软件直接对项目开源到github仓库。 也可以手动去github创建一个空仓库，然后手动在命令行中推送。 12345git initgit remote add origin https://github.com/yourusername/your-repo.gitgit add .git commit -m &quot;Initial commit&quot;git push -u origin main 3. 创建Token在个人设置中新增一个Personal access tokens。至少要包含repo权限，然后记住token。这个token是给Github Action用的，Github Action会把Hexo编译部署到gh-pages分支。 随后在存放Hexo代码的仓库里把这个Token新增进去，名称为GH_TOKEN(随意，后面需要一致)。 4. 修改_config.yml在_config.yml中修改deploy字段。指示Hexo在deploy时的推送地址。 1234deploy: type: git repo: https://github.com/yourusername/your-repo.git branch: gh-pages 5. 配置Github Action工作流在.github文件夹下新增workflows文件夹，然后新增deploy.yml文件，内容如下。 里面有个node-version要和你本地的node一致。步骤大致意思就是使用ubuntu-latest作为基础环境，然后安装各种依赖，随后hexo generate生成博客网站静态文件夹，把这个文件夹推送到同一仓库的gh-pages分支。 1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950name: Deploy Hexo to GitHub Pageson: push: branches: - main # 当推送到 main 分支时触发jobs: build: runs-on: ubuntu-latest steps: - name: Checkout repository uses: actions/checkout@v2 with: submodules: false # 禁用子模块检查 - name: Setup Node.js uses: actions/setup-node@v2 with: node-version: '18' - name: Install Dependencies run: npm install - name: Install Hexo Git Deployer run: | npm install hexo-deployer-git --save npm install hexo-cli -g - name: Clean and Generate Static Files run: | hexo clean hexo generate - name: Configure Git run: | git config --global user.name 'github-actions[bot]' git config --global user.email 'github-actions[bot]@users.noreply.github.com' - name: Deploy to GitHub Pages env: GH_TOKEN: ${{ secrets.GH_TOKEN }} run: | cd public/ git init git add -A git commit -m &quot;Create by workflows&quot; git remote add origin https://${{ secrets.GH_TOKEN }}@github.com/yourusername/your-repo.git git push origin HEAD:gh-pages -f 6. 推送验证把刚才更新的所有文件都推送一遍，github就会触发工作流，然后去网站看工作流运转的如何。等一切运转完毕，就会发现仓库多出一个gh-pages分支。 7. 配置Github Pages在仓库settings中配置page来源为gh-pages分支即可。等待网站部署完毕，就可以看了。网站链接可以在settings的GitHub Pages看到，也可以去action里看到。 8. 修改Hexo主题样式以一个比较热门的主题为演示示例，参考地址https://github.com/ppoffice/hexo-theme-icarus。 若要使用NPM将Icarus安装为Node包，在你的Hexo站点根目录运行如下命令： 1npm install -S hexo-theme-icarus hexo-renderer-inferno 接下来，使用hexo命令修改主题为Icarus: 1hexo config theme icarus 会发现多出一个_config.icarus.yml文件。这是Icarus主题的配置文件。 最后推送到仓库，等待部署后，就可以了。 10. 添加文章你可以执行下列命令来创建一篇新文章或者新的页面。 1$ hexo new [layout] &lt;title&gt; 您可以在命令中指定文章的布局（layout），默认为 post，可以通过修改 _config.yml 中的 default_layout 参数来指定默认布局。 文章添加编辑后，现在只需要推送到仓库，那么github不仅会保存你的Hexo个人博客源码，还会自动更新个人博客静态页面到gh-pages，由此触发github-page功能来更新你的个人博客网站。 遇到了一些问题和方案1. 网站没有样式问题在网站打开F12，发现css等样式资源无法加载，仔细查看报错原因和请求地址，发现并不是当前仓库。 缺少仓库地址，所以把请求地址复制一份，并在后面添加上仓库名即可，这需要修改_config.yml中修改url字段。yourusername似乎为小写。 推送后等待工作流执行，查看结果。 12url: https://yourusername.github.io/your-reporoot: /your-repo/ 2. 图片不显示在_config.yml中设置 1post_asset_folder: true 意思是每个md博文会单独配套一个同名文件夹，用来存放图片。形如 1234source/_posts/├── my-new-post.md└── my-new-post/ └── example.jpg hexo提供三种语法 123{% asset_path slug %}{% asset_img slug [title] %}{% asset_link slug [title] %} 那么在md中可以这样引用图片 1{% asset_img example.jpg This is an example image %} 这样一来，部署的时候图片就不会不显示了，但是有个新的问题，我在本地编辑md的时候无法预览图片怎么办。 建议用VSCode下载插件vscode-hexo和Hexo Utils，随后在左边栏目就可以看到新Hexo Utils的新菜单，只要你的VSCode当前打开的文件夹是hexo的根目录，那么插件就会自动识别到，当你对md文件使用“侧边预览”时，图片就正常显示了。","link":"/RiverBreaker-blog/2024/07/05/%E5%88%A9%E7%94%A8GitHub%E6%9E%84%E5%BB%BA%E8%87%AA%E5%8A%A8%E5%8C%96%E9%83%A8%E7%BD%B2%E7%9A%84%E5%8D%9A%E5%AE%A2/"}],"tags":[{"name":"博客搭建教程","slug":"博客搭建教程","link":"/RiverBreaker-blog/tags/%E5%8D%9A%E5%AE%A2%E6%90%AD%E5%BB%BA%E6%95%99%E7%A8%8B/"}],"categories":[{"name":"教程","slug":"教程","link":"/RiverBreaker-blog/categories/%E6%95%99%E7%A8%8B/"}],"pages":[{"title":"","text":"Document + + Hexo基于Github Action实现自动更新Github Pages Preview | Documentation | Icarus Docs","link":"/RiverBreaker-blog/about/index.html"},{"title":"","text":".container { max-width: 1400px; /* 这里设置你需要的宽度 */ margin: 0 auto; /* 居中对齐 */ }","link":"/RiverBreaker-blog/css/custom.css"},{"title":"","text":"/* 背景色 */ html { background-color: #2e2e2e !important; } /* 顶部导航栏背景色 */ .navbar { background-color: #000 !important; } /* 卡片背景色 */ .card { background-color: #1e1e1e !important; } /* 顶部导航栏字体颜色 */ .navbar-item, .navbar-link { color: #e1e1e1 !important; } /* 文章正文字体颜色 */ .card { color: #eeeeee !important; } /* 文章标题字体颜色 */ .content h1, .content h2, .content h3, .content h4, .content h5, .content h6 { color: #e1e1e1 !important; } /* 其他文字颜色 */ .title { color: #e1e1e1 !important; } .menu-list a { color: #e1e1e1 !important; }","link":"/RiverBreaker-blog/css/dark-theme.css"}]}